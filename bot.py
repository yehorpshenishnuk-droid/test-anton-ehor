import os
import requests
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
POSTER_TOKEN = os.getenv('POSTER_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
GROUP_CHAT_ID = int(os.getenv('GROUP_CHAT_ID'))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    one_time_keyboard=False,
    keyboard=[
        [KeyboardButton("üìÖ –í–∏—Ç–æ—Ä–≥ –∑–∞ –¥–µ–Ω—å")]
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º (–±–µ–∑ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è)
def get_waiters_revenue():
    today = datetime.now().strftime('%Y%m%d')
    url = (
        f'https://joinposter.com/api/dash.getWaitersSales?'
        f'token={POSTER_TOKEN}&dateFrom={today}&dateTo={today}'
    )
    try:
        resp = requests.get(url, timeout=20)
        resp.raise_for_status()
        return resp.json().get('response', [])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Poster API: {e}")
        return []

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
def format_waiters_message(data):
    if not data:
        return "üòï –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ –≤–∏—Ç–æ—Ä–≥—É –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ."

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ
    sorted_data = sorted(data, key=lambda x: float(x.get('sum', 0)), reverse=True)

    lines = ["üìÖ –í–∏—Ç–æ—Ä–≥ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:"]
    for i, waiter in enumerate(sorted_data, start=1):
        name = waiter.get("waiter_name", "–ù–µ–≤—ñ–¥–æ–º–∏–π")
        amount = float(waiter.get("sum", 0))
        formatted_amount = f"{amount:,.0f}".replace(",", " ")
        lines.append(f"{i}. {name}: {formatted_amount} –≥—Ä–Ω")

    return "\n".join(lines)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
@dp.message_handler(lambda message: message.text == "üìÖ –í–∏—Ç–æ—Ä–≥ –∑–∞ –¥–µ–Ω—å")
async def day_revenue_handler(message: types.Message):
    data = get_waiters_revenue()
    msg = format_waiters_message(data)
    await message.answer(msg, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
@dp.message_handler(commands=['start', 'report'])
async def start_cmd(message: types.Message):
    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –≤–∏—Ç–æ—Ä–≥ –ø–æ –∫–æ–∂–Ω–æ–º—É –æ—Ñ—ñ—Ü—ñ–∞–Ω—Ç—É üëá", reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    executor.start_polling(dp)
