import logging
import os
from aiogram import Bot, Dispatcher, types, executor
import requests
from datetime import datetime
from zoneinfo import ZoneInfo

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
POSTER_TOKEN = os.getenv("POSTER_TOKEN")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")
CHOICE_API_TOKEN = os.getenv("CHOICE_API_TOKEH")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–í—ã—Ç–æ—Ä–≥ –∑–∞ –¥–µ–Ω—å", "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Ç–æ—Ä–≥–∞ –∏–∑ Poster
@dp.message_handler(lambda message: message.text == "–í—ã—Ç–æ—Ä–≥ –∑–∞ –¥–µ–Ω—å")
async def revenue_handler(message: types.Message):
    try:
        now = datetime.now(ZoneInfo("Europe/Kyiv"))
        today = now.strftime("%Y-%m-%d")

        url = f"https://joinposter.com/api/dash.getTurnover?token={POSTER_TOKEN}&dateFrom={today}&dateTo={today}"
        response = requests.get(url)
        data = response.json()

        if "response" not in data or not data["response"]:
            await message.answer("–í—ã—Ç–æ—Ä–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π.")
            return

        turnover_data = data["response"][0]
        revenue = float(turnover_data.get("turnover", 0)) / 100  # –∫–æ–ø–µ–π–∫–∏ ‚Üí –≥—Ä–∏–≤–Ω—ã

        await message.answer(f"–í—ã—Ç–æ—Ä–≥ –∑–∞ {today}: üí∏ {revenue:.2f} –≥—Ä–Ω")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã—Ç–æ—Ä–≥–∞:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã—Ç–æ—Ä–≥–∞.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∏–∑ Choice
@dp.message_handler(lambda message: message.text == "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def booking_handler(message: types.Message):
    await message.answer("–ü–æ–ª—É—á–∞—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")

    try:
        now = datetime.now(ZoneInfo("Europe/Kyiv"))
        today = now.strftime("%Y-%m-%d")

        headers = {
            "Authorization": f"Bearer {CHOICE_API_TOKEN}"
        }

        url = "https://api.choiceqr.com/api/v1/bookings"
        params = {
            "date": today
        }

        response = requests.get(url, headers=headers, params=params)
        data = response.json()

        if not isinstance(data, list):
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Choice API.")
            return

        future_bookings = []
        for booking in data:
            dt = datetime.fromisoformat(booking["dateTime"])
            if dt > now:
                name = booking["customerName"]
                guests = booking["guestsCount"]
                time = dt.strftime("%H:%M")
                future_bookings.append(f"üë§ {name} ‚Äî {time} ‚Äî {guests} —á–µ–ª.")

        if future_bookings:
            result = "\n".join(future_bookings)
        else:
            result = "–ù–µ—Ç –±—É–¥—É—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."

        await message.answer(f"üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {today}:\n{result}")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
