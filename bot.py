import os
import requests
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, timedelta

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
POSTER_TOKEN = os.getenv('POSTER_TOKEN')
CHOICE_TOKEN = os.getenv('CHOICE_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

# üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([POSTER_TOKEN, CHOICE_TOKEN, TELEGRAM_TOKEN]):
    raise ValueError("‚õîÔ∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã!")

# üéõ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add(KeyboardButton("üìÖ –í–∏—Ç–æ—Ä–≥ –∑–∞ –¥–µ–Ω—å"))
keyboard.add(KeyboardButton("üìñ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"))

# ü§ñ Telegram Bot
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# üìä –ü–æ–ª—É—á–∏—Ç—å –≤—ã—Ç–æ—Ä–≥ –ø–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º
def get_waiters_revenue():
    today = datetime.now().strftime('%Y%m%d')
    url = f'https://joinposter.com/api/dash.getWaitersSales?token={POSTER_TOKEN}&dateFrom={today}&dateTo={today}'
    try:
        resp = requests.get(url, timeout=20)
        resp.raise_for_status()
        return resp.json().get('response', [])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Poster API: {e}")
        return []

# üßæ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—Ç–æ—Ä–≥–∞
def format_waiters_message(data):
    if not data:
        return "üòï –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ –≤–∏—Ç–æ—Ä–≥—É –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ."
    sorted_data = sorted(data, key=lambda x: float(x.get('revenue', 0)), reverse=True)
    lines = ["üìÖ –í–∏—Ç–æ—Ä–≥ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:"]
    for i, waiter in enumerate(sorted_data, 1):
        name = waiter.get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π").strip()
        revenue_uah = float(waiter.get("revenue", 0)) / 100
        formatted = f"{revenue_uah:,.0f}".replace(",", " ")
        lines.append(f"{i}. {name}: {formatted} –≥—Ä–Ω")
    return "\n".join(lines)

# üìÖ –ü–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
def get_today_bookings():
    now = datetime.utcnow()
    from_time = now.replace(hour=0, minute=0, second=0, microsecond=0).isoformat() + "Z"
    till_time = now.replace(hour=23, minute=59, second=59, microsecond=999000).isoformat() + "Z"

    url = "https://open-api.choiceqr.com/api/bookings/list"
    headers = {"x-token": CHOICE_TOKEN}
    params = {
        "from": from_time,
        "till": till_time,
        "periodField": "bookingDt"
    }

    try:
        response = requests.get(url, headers=headers, params=params, timeout=20)
        response.raise_for_status()
        bookings = response.json()
        print("ü™µ LOG ‚Äî Choice API response:", bookings)
        return bookings
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Choice API: {e}")
        return []

# üìÑ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
def format_booking_message(bookings):
    filtered = []
    now = datetime.utcnow()
    for b in bookings:
        status = b.get("status")
        dt_str = b.get("dateTime")
        customer = b.get("customer", {})
        name = customer.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        count = b.get("personCount", 0)

        if status in ("CREATED", "CONFIRMED") and dt_str:
            try:
                dt = datetime.fromisoformat(dt_str.replace("Z", "+00:00"))
                # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                time_str = dt.strftime('%H:%M')
                filtered.append(f"üë§ {name} ‚Äî {time_str}, {count} —á–µ–ª.")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞—Ç–æ–π: {e}")

    if not filtered:
        return "üìñ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."
    result = "\n".join(filtered)
    return f"üìñ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{result}"

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –í–∏—Ç–æ—Ä–≥
@dp.message_handler(lambda m: m.text == "üìÖ –í–∏—Ç–æ—Ä–≥ –∑–∞ –¥–µ–Ω—å")
async def handle_revenue(m: types.Message):
    data = get_waiters_revenue()
    msg = format_waiters_message(data)
    await m.answer(msg, reply_markup=keyboard)

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message_handler(lambda m: m.text == "üìñ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def handle_bookings(m: types.Message):
    bookings = get_today_bookings()
    msg = format_booking_message(bookings)
    await m.answer(msg, reply_markup=keyboard)

# üîò –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    await m.answer("üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=keyboard)

# ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç
if __name__ == '__main__':
    executor.start_polling(dp)
