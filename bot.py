import os
import requests
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
POSTER_TOKEN = os.getenv('POSTER_TOKEN')
CHOICE_TOKEN = os.getenv('CHOICE_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

if not all([POSTER_TOKEN, CHOICE_TOKEN, TELEGRAM_TOKEN]):
    raise ValueError("–û–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    one_time_keyboard=False,
    keyboard=[
        [KeyboardButton("üìÖ –í–∏—Ç–æ—Ä–≥ –∑–∞ –¥–µ–Ω—å")],
        [KeyboardButton("üìñ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")]
    ]
)

# === Telegram ===
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# === –í—ã—Ä—É—á–∫–∞ –ø–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º ===
def get_waiters_revenue():
    today = datetime.now().strftime('%Y%m%d')
    url = (
        f'https://joinposter.com/api/dash.getWaitersSales?'
        f'token={POSTER_TOKEN}&dateFrom={today}&dateTo={today}'
    )
    try:
        resp = requests.get(url, timeout=20)
        resp.raise_for_status()
        return resp.json().get('response', [])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Poster API: {e}")
        return []

def format_waiters_message(data):
    if not data:
        return "üòï –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ –≤–∏—Ç–æ—Ä–≥—É –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ."

    sorted_data = sorted(data, key=lambda x: float(x.get('revenue', 0)), reverse=True)
    lines = ["üìÖ –í–∏—Ç–æ—Ä–≥ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:"]
    for i, waiter in enumerate(sorted_data, start=1):
        name = waiter.get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π").strip()
        revenue_cop = float(waiter.get("revenue", 0))
        revenue_uah = revenue_cop / 100
        formatted = f"{revenue_uah:,.0f}".replace(",", " ")
        lines.append(f"{i}. {name}: {formatted} –≥—Ä–Ω")
    return "\n".join(lines)

@dp.message_handler(lambda message: message.text == "üìÖ –í–∏—Ç–æ—Ä–≥ –∑–∞ –¥–µ–Ω—å")
async def day_revenue_handler(message: types.Message):
    data = get_waiters_revenue()
    msg = format_waiters_message(data)
    await message.answer(msg, reply_markup=keyboard)

# === –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ===
def get_today_bookings():
    from_zone = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0).isoformat() + "Z"
    to_zone = datetime.utcnow().replace(hour=23, minute=59, second=59, microsecond=999000).isoformat() + "Z"

    url = "https://open-api.choiceqr.com/api/bookings/list"
    headers = {
        "Authorization": f"Bearer {CHOICE_TOKEN}",
        "Content-Type": "application/json"
    }
    params = {
        "from": from_zone,
        "till": to_zone,
        "periodField": "bookingDt",
        "perPage": 100,
        "page": 1
    }

    try:
        response = requests.get(url, headers=headers, params=params, timeout=15)
        response.raise_for_status()
        data = response.json()
        print("üì• RAW BOOKINGS:", data)  # –¥–ª—è –ª–æ–≥–æ–≤
        return data.get("response", [])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Choice API: {e}")
        return []

def format_bookings(bookings):
    if not bookings:
        return "üìñ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π."

    lines = ["üìñ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:"]
    for b in bookings:
        name = b.get("customer", {}).get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        iso_time = b.get("dateTime")
        count = b.get("personCount", 0)
        status = b.get("status", "-")

        time_part = iso_time[11:16] if iso_time else "??:??"
        lines.append(f"üë§ {name} ‚Äî {time_part} ‚Äî {count} —á–µ–ª. [{status}]")

    return "\n".join(lines)

@dp.message_handler(lambda message: message.text == "üìñ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def booking_handler(message: types.Message):
    bookings = get_today_bookings()
    msg = format_bookings(bookings)
    await message.answer(msg, reply_markup=keyboard)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message_handler(commands=['start', 'report'])
async def start_cmd(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá", reply_markup=keyboard)

# === –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ===
if __name__ == '__main__':
    executor.start_polling(dp)
