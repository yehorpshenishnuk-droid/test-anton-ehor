import os
import requests
from aiogram import Bot, Dispatcher, types, executor
from datetime import datetime, timezone, timedelta

# –¢–æ–∫–µ–Ω—ã –∏–∑ Render (Environment Variables)
POSTER_TOKEN = os.getenv('POSTER_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHOICE_TOKEN = os.getenv('CHOICE_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
if not (POSTER_TOKEN and TELEGRAM_TOKEN and CHOICE_TOKEN):
    raise ValueError("–û–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.add("üìÖ –í–∏—Ç–æ—Ä–≥ –∑–∞ –¥–µ–Ω—å", "üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Ç–æ—Ä–≥–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
def get_waiters_revenue():
    today = datetime.now().strftime('%Y%m%d')
    url = (
        f'https://joinposter.com/api/dash.getWaitersSales?'
        f'token={POSTER_TOKEN}&dateFrom={today}&dateTo={today}'
    )
    try:
        resp = requests.get(url, timeout=20)
        resp.raise_for_status()
        return resp.json().get('response', [])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Poster API: {e} (–æ—Ç–≤–µ—Ç: {resp.text if 'resp' in locals() else 'no response'})")
        return []

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—ã—Ç–æ—Ä–≥—É
def format_waiters_message(data):
    if not data:
        return "üòï –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ –≤–∏—Ç–æ—Ä–≥—É –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ."
    sorted_data = sorted(data, key=lambda x: float(x.get('revenue', 0)), reverse=True)
    lines = ["üìÖ –í–∏—Ç–æ—Ä–≥ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:"]
    for i, waiter in enumerate(sorted_data, start=1):
        name = waiter.get("name", "–ù–µ–≤—ñ–¥–æ–º–∏–π").strip()
        revenue_cop = float(waiter.get("revenue", 0))
        revenue_uah = revenue_cop / 100
        formatted = f"{revenue_uah:,.0f}".replace(",", " ")
        lines.append(f"{i}. {name}: {formatted} –≥—Ä–Ω")
    return "\n".join(lines)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–í–∏—Ç–æ—Ä–≥ –∑–∞ –¥–µ–Ω—å"
@dp.message_handler(lambda message: message.text == "üìÖ –í–∏—Ç–æ—Ä–≥ –∑–∞ –¥–µ–Ω—å")
async def day_revenue_handler(message: types.Message):
    data = get_waiters_revenue()
    msg = format_waiters_message(data)
    await message.answer(msg, reply_markup=keyboard)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ Choice API
def fetch_choice_bookings():
    today = datetime.utcnow().date()
    date_from = datetime.combine(today, datetime.min.time(), tzinfo=timezone.utc).isoformat()
    date_to = (datetime.combine(today, datetime.max.time(), tzinfo=timezone.utc)).isoformat()
    url = "https://open-api.choiceqr.com/bookings/list"
    params = {
        "from": date_from,
        "till": date_to,
        "periodField": "bookingDt",
    }
    headers = {"Authorization": f"Bearer {CHOICE_TOKEN}"}
    try:
        resp = requests.get(url, params=params, headers=headers, timeout=20)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Choice API: {e} (status: {resp.status_code if 'resp' in locals() else 'no response'})")
        print("–û—Ç–≤–µ—Ç Choice:", resp.text if 'resp' in locals() else '')
        return []

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º
def format_booking_message(bookings):
    if not isinstance(bookings, list) or not bookings:
        return "üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤."

    now_utc = datetime.now(timezone.utc)
    lines = ["üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏):"]
    count = 0
    for b in bookings:
        dt_str = b.get("dateTime", {}).get("$date") or b.get("dateTime")
        customer = b.get("customer", {}).get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        persons = b.get("personCount", b.get("guestsCount", "‚àí"))
        try:
            dt = datetime.fromisoformat(dt_str.replace("Z", "+00:00"))
            if dt > now_utc:
                time_str = dt.astimezone().strftime("%H:%M")
                lines.append(f"{time_str} ‚Äî {customer} ({persons} —á–µ–ª.)")
                count += 1
        except Exception:
            continue
    if count == 0:
        return "üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n–ù–µ–º–∞—î –Ω–∞–π–±–ª–∏–∂—á–∏—Ö –±—Ä–æ–Ω–µ–π."
    return "\n".join(lines)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
@dp.message_handler(lambda message: message.text == "üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def booking_handler(message: types.Message):
    bookings = fetch_choice_bookings()
    msg = format_booking_message(bookings)
    await message.answer(msg, reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start', 'report'])
async def start_cmd(message: types.Message):
    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
